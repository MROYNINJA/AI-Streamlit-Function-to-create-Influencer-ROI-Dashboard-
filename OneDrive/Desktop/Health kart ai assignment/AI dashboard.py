# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y0_BKNXnWfNPK1iEdJ2M9uNOpPV4-ElN
"""

# influencer_roi_dashboard/dashboard.py
try:
    import streamlit as st
except ModuleNotFoundError:
    raise ImportError("The 'streamlit' package is not installed. Please install it using 'pip install streamlit' before running this dashboard.")

import pandas as pd
import numpy as np

# -----------------------------
# Simulated Data Loading
# -----------------------------
def load_data():
    influencers = pd.DataFrame({
        'id': [1, 2],
        'name': ['Alex', 'Bella'],
        'category': ['Fitness', 'Beauty'],
        'gender': ['Male', 'Female'],
        'follower_count': [150000, 200000],
        'platform': ['Instagram', 'YouTube']
    })

    posts = pd.DataFrame({
        'influencer_id': [1, 2],
        'platform': ['Instagram', 'YouTube'],
        'date': ['2025-07-01', '2025-07-03'],
        'url': ['https://ig.com/1', 'https://yt.com/2'],
        'caption': ['Great workout!', 'New skincare review'],
        'reach': [120000, 180000],
        'likes': [5000, 7000],
        'comments': [300, 500]
    })

    tracking_data = pd.DataFrame({
        'source': ['Instagram', 'YouTube'],
        'campaign': ['Summer25', 'GlowUp'],
        'influencer_id': [1, 2],
        'user_id': ['u321', 'u654'],
        'product': ['Shoes', 'Cream'],
        'date': ['2025-07-02', '2025-07-04'],
        'orders': [3, 4],
        'revenue': [450, 800]
    })

    payouts = pd.DataFrame({
        'influencer_id': [1, 2],
        'basis': ['post', 'order'],
        'rate': [500, 100],
        'orders': [3, 4],
        'total_payout': [500, 400]
    })

    return influencers, posts, tracking_data, payouts

# -----------------------------
# Main App
# -----------------------------
st.set_page_config(page_title='Influencer ROI Dashboard', layout='wide')
st.title(" Influencer Campaign ROI Dashboard")

influencers, posts, tracking_data, payouts = load_data()

# Sidebar Filters
selected_platform = st.sidebar.selectbox("Select Platform", ['All'] + influencers['platform'].unique().tolist())

# Filtering Logic
if selected_platform != 'All':
    influencers = influencers[influencers['platform'] == selected_platform]
    posts = posts[posts['platform'] == selected_platform]
    tracking_data = tracking_data[tracking_data['source'] == selected_platform]
    payouts = payouts[payouts['influencer_id'].isin(influencers['id'])]

# Merge for Insights
df = tracking_data.merge(payouts, on='influencer_id')
df = df.merge(influencers, left_on='influencer_id', right_on='id')

# Metrics Calculation
df['ROI'] = (df['revenue'] - df['total_payout']) / df['total_payout']
df['ROAS'] = df['revenue'] / df['total_payout']

# KPI Cards
col1, col2, col3 = st.columns(3)
col1.metric("Total Revenue", f"${df['revenue'].sum():,.2f}")
col2.metric("Total Payout", f"${df['total_payout'].sum():,.2f}")
col3.metric("Average ROI", f"{df['ROI'].mean():.2f}")

# ROI Table
st.subheader(" Influencer ROI Performance")
st.dataframe(df[['name', 'category', 'platform', 'revenue', 'total_payout', 'ROI', 'ROAS']])

# Top Influencers
top_roi = df.sort_values(by='ROI', ascending=False).head(5)
st.subheader(" Top 5 Influencers by ROI")
st.table(top_roi[['name', 'ROI', 'ROAS', 'revenue']])

# Poor ROI
poor_roi = df[df['ROI'] < 0.5]
if not poor_roi.empty:
    st.subheader(" Poor ROI Influencers")
    st.table(poor_roi[['name', 'ROI', 'revenue', 'total_payout']])

# Export Option
st.download_button("Download ROI Report (CSV)", df.to_csv(index=False), "roi_report.csv")